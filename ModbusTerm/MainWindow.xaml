<Window x:Class="ModbusTerm.MainWindow"
        xmlns:system="clr-namespace:System;assembly=mscorlib"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:ModbusTerm"
        xmlns:converters="clr-namespace:ModbusTerm.Converters"
        xmlns:helpers="clr-namespace:ModbusTerm.Helpers"
        xmlns:viewmodels="clr-namespace:ModbusTerm.ViewModels"
        mc:Ignorable="d"
        Title="Modbus Toolbox - Modbus Develpment Tools" Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"
        Width="900" Height="950" MinWidth="800" MinHeight="800"
        WindowStartupLocation="CenterScreen">
    
    <Window.Resources>
        <!-- Converters -->
        <converters:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
        <converters:InverseBooleanToVisibilityConverter x:Key="InverseBooleanToVisibilityConverter" />
        <converters:DataBitsConverter x:Key="DataBitsConverter" />
        <converters:InverseBooleanConverter x:Key="InverseBooleanConverter"/>
        <converters:ParityConverter x:Key="ParityConverter" />
        <converters:StopBitsConverter x:Key="StopBitsConverter" />
        <converters:ConnectionStatusToColorConverter x:Key="ConnectionStatusToColorConverter" />
        <helpers:ModbusDataTypeConverter x:Key="ModbusDataTypeConverter"/>
        <helpers:CheckboxLabelConverter x:Key="CheckboxLabelConverter"/>
        <converters:ConnectionTypeConverter x:Key="ConnectionTypeConverter" />
        <converters:BooleanToWidthConverter x:Key="BooleanToWidthConverter" />
        <converters:BaudRateConverter x:Key="BaudRateConverter" />
        
        <!-- Custom DataGridRow style with orange selection -->
        <Style x:Key="CustomDataGridRowStyle" TargetType="DataGridRow">
            <!-- Base style -->
            <Setter Property="Background" Value="Transparent" />
            <Style.Triggers>
                <!-- Normal selection (not modified) - light orange -->
                <Trigger Property="IsSelected" Value="True">
                    <Setter Property="Background" Value="#FFE2C0" />
                </Trigger>
                
                <!-- Modified but not selected - light green -->
                <DataTrigger Binding="{Binding IsRecentlyModified}" Value="True">
                    <Setter Property="Background" Value="#D5F5D5" />
                    <Setter Property="FontWeight" Value="Bold" />
                </DataTrigger>
                
                <!-- Both selected AND modified - darker green -->
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding IsRecentlyModified}" Value="True" />
                        <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="True" />
                    </MultiDataTrigger.Conditions>
                    <Setter Property="Background" Value="#B8E2B8" />
                    <Setter Property="FontWeight" Value="Bold" />
                </MultiDataTrigger>
            </Style.Triggers>
        </Style>
        
        <!-- Common Button Style -->
        <Style x:Key="StandardButtonStyle" TargetType="Button">
            <Setter Property="Padding" Value="10,5" />
            <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ActiveBorderBrushKey}}" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border Background="{TemplateBinding Background}" 
                                BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}" 
                                CornerRadius="3">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" Margin="{TemplateBinding Padding}" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" />
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        
        <!-- GroupBox Header Style -->
        <Style x:Key="GroupBoxHeaderStyle" TargetType="{x:Type GroupBox}">
            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ActiveBorderBrushKey}}" />
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="Padding" Value="5" />
            <Setter Property="HeaderTemplate">
                <Setter.Value>
                    <DataTemplate>
                        <TextBlock Text="{Binding}" FontWeight="Bold" Foreground="{DynamicResource {x:Static SystemColors.ActiveCaptionTextBrushKey}}" />
                    </DataTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        
        <!-- DataGrid Style -->
        <Style x:Key="ModernDataGridStyle" TargetType="{x:Type DataGrid}">
            <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ActiveBorderBrushKey}}" />
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="RowBackground" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
            <Setter Property="AlternatingRowBackground" Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" />
            <Setter Property="HorizontalGridLinesBrush" Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" />
            <Setter Property="VerticalGridLinesBrush" Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" />
        </Style>
    </Window.Resources>
    
    <!-- Main Window Grid -->    
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/> <!-- Connection Panel -->
            <RowDefinition Height="2*"/> <!-- Main Content -->
            <RowDefinition Height="1*" MinHeight="150" MaxHeight="300"/> <!-- Event Log with min/max heights -->
        </Grid.RowDefinitions>
        
        <!-- Connection Panel -->
        <GroupBox Grid.Row="0" Header="Connection" Margin="5" Padding="5" Style="{StaticResource GroupBoxHeaderStyle}">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                
                <!-- Connection Type -->
                <Grid Grid.Row="0" Margin="0,0,0,10">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    
                    <!-- Connection Type and Mode -->
                    <StackPanel Grid.Column="0" Orientation="Horizontal" x:Name="ConnectionTypePanel" VerticalAlignment="Center">
                        <TextBlock Text="Type:" VerticalAlignment="Center" Margin="0,0,10,0" />
                        <RadioButton Content="TCP" Margin="0,0,10,0" VerticalAlignment="Center" VerticalContentAlignment="Center"
                                     GroupName="ConnectionTypeGroup" Tag="TCP" Checked="RadioButton_Checked" 
                                     IsChecked="{Binding IsTcpMode, Mode=OneWay}" />
                        <RadioButton Content="RTU" Margin="0,0,10,0" VerticalAlignment="Center" VerticalContentAlignment="Center"
                                     GroupName="ConnectionTypeGroup" Tag="RTU" Checked="RadioButton_Checked" 
                                     IsChecked="{Binding IsRtuMode, Mode=OneWay}" />
                        
                        <TextBlock Text="Mode:" VerticalAlignment="Center" Margin="0,0,10,0" />
                        <RadioButton Content="Master" IsChecked="{Binding IsMasterMode, Mode=OneWay}" Margin="0,0,10,0" 
                                     Checked="ModeRadioButton_Checked" Tag="Master" VerticalAlignment="Center" VerticalContentAlignment="Center" 
                                     GroupName="ModeGroup" />
                        <RadioButton Content="Slave" IsChecked="{Binding IsSlaveMode, Mode=OneWay}" Margin="0,0,10,0" 
                                     Checked="ModeRadioButton_Checked" Tag="Slave" VerticalAlignment="Center" VerticalContentAlignment="Center" 
                                     GroupName="ModeGroup" />
                        <RadioButton Content="Listen In" IsChecked="{Binding IsListenMode, Mode=OneWay}" Margin="0,0,10,0" 
                                     Checked="ModeRadioButton_Checked" Tag="ListenIn" VerticalAlignment="Center" VerticalContentAlignment="Center" 
                                     Visibility="{Binding IsRtuModeOnly, Converter={StaticResource BooleanToVisibilityConverter}}" 
                                     GroupName="ModeGroup" />
                    </StackPanel>
                    
                    <!-- Timeout Setting -->
                    <StackPanel Grid.Column="1" Orientation="Horizontal" VerticalAlignment="Center">
                        <TextBlock Text="Timeout (ms):" VerticalAlignment="Center" Margin="0,0,10,0" />
                        <TextBox Width="80" VerticalAlignment="Center" VerticalContentAlignment="Center" Padding="5,2" 
                                 Text="{Binding ConnectionParameters.Timeout, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                                 ToolTip="Request timeout in milliseconds. 0 = no timeout" />
                    </StackPanel>
                </Grid>
                
                <!-- TCP Parameters (shown when TCP is selected) -->
                <Grid Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="4" Margin="0,5,0,5"
                      x:Name="TcpParametersPanel" 
                      Visibility="{Binding IsTcpMode, Converter={StaticResource BooleanToVisibilityConverter}}">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    
                    <TextBlock Grid.Column="0" Text="IP Address / Hostname:" VerticalAlignment="Center" Margin="0,0,5,0" />
                    <TextBox Grid.Column="1" Text="{Binding ConnectionParameters.IpAddress, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                             Margin="0,0,10,0" IsEnabled="{Binding IsMasterMode}" />
                    
                    <TextBlock Grid.Column="2" Text="Port:" VerticalAlignment="Center" Margin="0,0,5,0" />
                    <TextBox Grid.Column="3" Text="{Binding ConnectionParameters.Port, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                             Margin="0,0,0,0" />
                </Grid>
                
                <!-- RTU Parameters (hidden by default) -->
                <Grid Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="4" Margin="0,5,0,5"
                      x:Name="RtuParametersPanel" 
                      Visibility="{Binding IsRtuMode, Converter={StaticResource BooleanToVisibilityConverter}}">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    
                    <!-- First row of RTU parameters -->
                    <TextBlock Grid.Row="0" Grid.Column="0" Text="COM Port:" VerticalAlignment="Center" Margin="0,0,5,0" />
                    <Grid Grid.Row="0" Grid.Column="1" Margin="0,0,10,0">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <ComboBox Grid.Column="0" Margin="0,0,5,0"
                                  ItemsSource="{Binding ComPorts}"
                                  SelectedItem="{Binding ConnectionParameters.ComPort, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                        <Button Grid.Column="1" Width="40" Height="24" 
                                ToolTip="Refresh COM port list"
                                Click="RefreshComPorts_Click"
                                Style="{StaticResource StandardButtonStyle}">
                            <TextBlock Text="⟳" FontSize="20" VerticalAlignment="Center" HorizontalAlignment="Center" Padding="0,0,0,5"/>
                        </Button>
                    </Grid>
                    
                    <TextBlock Grid.Row="0" Grid.Column="2" Text="Baud Rate:" VerticalAlignment="Center" Margin="0,0,5,0" />
                    <Grid Grid.Row="0" Grid.Column="3">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        
                        <!-- Standard Baud Rate Dropdown (always full width) -->
                        <ComboBox Grid.Column="0" Margin="0,0,0,0"
                                  Name="BaudRateComboBox"
                                  HorizontalAlignment="Stretch"
                                  ItemsSource="{Binding StandardBaudRates}"
                                  SelectedItem="{Binding ConnectionParameters.BaudRate, Mode=TwoWay}"
                                  SelectionChanged="BaudRateComboBox_SelectionChanged">
                            <ComboBox.ItemTemplate>
                                <DataTemplate>
                                    <TextBlock>
                                        <!-- Display "Custom..." for value -1, otherwise show the actual value -->
                                        <TextBlock.Style>
                                            <Style TargetType="TextBlock">
                                                <Setter Property="Text" Value="{Binding}" />
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding}" Value="-1">
                                                        <Setter Property="Text" Value="Custom..." />
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </TextBlock.Style>
                                    </TextBlock>
                                </DataTemplate>
                            </ComboBox.ItemTemplate>
                        </ComboBox>
                        
                        <!-- Custom Baud Rate Input (to the right of dropdown) -->
                        <Border Grid.Column="1" Margin="2,0,0,0" BorderThickness="1" BorderBrush="#FFABADB3" Padding="2"
                               Background="#FFFFFFFF" Width="110"
                               HorizontalAlignment="Left"
                               Visibility="{Binding ConnectionParameters.UseCustomBaudRate, Converter={StaticResource BooleanToVisibilityConverter}}">
                            <DockPanel>
                                <TextBlock DockPanel.Dock="Left" Text="Custom:" Margin="0,0,5,0" VerticalAlignment="Center" />
                                <TextBox Text="{Binding ConnectionParameters.CustomBaudRate, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                                         VerticalContentAlignment="Center" BorderThickness="0" />
                            </DockPanel>
                        </Border>
                    </Grid>
                    
                    <!-- Second row of RTU parameters -->
                    <TextBlock Grid.Row="1" Grid.Column="0" Text="Parity:" VerticalAlignment="Center" Margin="0,5,5,0" />
                    <ComboBox Grid.Row="1" Grid.Column="1" Margin="0,5,10,0"
                              SelectedIndex="{Binding ConnectionParameters.Parity, Mode=TwoWay, Converter={StaticResource ParityConverter}}">
                        <ComboBoxItem>None</ComboBoxItem>
                        <ComboBoxItem>Even</ComboBoxItem>
                        <ComboBoxItem>Odd</ComboBoxItem>
                        <ComboBoxItem>Mark</ComboBoxItem>
                        <ComboBoxItem>Space</ComboBoxItem>
                    </ComboBox>
                    
                    <TextBlock Grid.Row="1" Grid.Column="2" Text="Data/Stop:" VerticalAlignment="Center" Margin="0,5,5,0" />
                    <StackPanel Grid.Row="1" Grid.Column="3" Orientation="Horizontal" Margin="0,5,0,0">
                        <ComboBox Width="80" Margin="0,0,5,0"
                                  SelectedIndex="{Binding ConnectionParameters.DataBits, Mode=TwoWay, Converter={StaticResource DataBitsConverter}}">
                            <ComboBoxItem>7</ComboBoxItem>
                            <ComboBoxItem>8</ComboBoxItem>
                        </ComboBox>
                        <ComboBox Width="80"
                                  SelectedIndex="{Binding ConnectionParameters.StopBits, Mode=TwoWay, Converter={StaticResource StopBitsConverter}}">
                            <ComboBoxItem>1</ComboBoxItem>
                            <ComboBoxItem>1.5</ComboBoxItem>
                            <ComboBoxItem>2</ComboBoxItem>
                        </ComboBox>
                    </StackPanel>
                </Grid>
                
                <!-- Connect/Disconnect buttons and profile controls -->
                <Grid Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="4" Margin="0,5,0,5">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    
                    <!-- Profile controls -->
                    <StackPanel Grid.Column="0" Orientation="Horizontal">
                        <TextBlock Text="Profile:" VerticalAlignment="Center" Margin="0,0,5,0" />
                        <ComboBox Width="150" Margin="0,0,10,0" 
                                  ItemsSource="{Binding Profiles}" 
                                  SelectedItem="{Binding SelectedProfileName, Mode=TwoWay}" />
                        <Button Content="Save" Width="80" Margin="0,0,5,0"
                                Command="{Binding SaveConnectionCommand}" Style="{StaticResource StandardButtonStyle}" />
                        <Button Content="Remove" Width="80"
                                Command="{Binding RemoveProfileCommand}" 
                                Style="{StaticResource StandardButtonStyle}" />
                    </StackPanel>
                    
                    <!-- Connect/Disconnect buttons -->
                    <StackPanel Grid.Column="2" Orientation="Horizontal" HorizontalAlignment="Right">
                        <!-- Slave ID control - only visible in slave mode -->
                        <StackPanel Orientation="Horizontal" Margin="0,0,10,0"
                                    Visibility="{Binding IsSlaveMode, Converter={StaticResource BooleanToVisibilityConverter}}">
                            <TextBlock Text="Slave ID:" VerticalAlignment="Center" Margin="0,0,5,0" />
                            <TextBox Text="{Binding SlaveId, UpdateSourceTrigger=PropertyChanged}" 
                                     Width="50"
                                     Height="24"
                                     VerticalContentAlignment="Center"
                                     ToolTip="Set the Modbus Slave ID (1-247)" />
                        </StackPanel>
                        
                        <!-- Connection status LED indicator -->
                        <Grid Margin="0,0,10,0">
                            <!-- LED housing (outer ring) -->
                            <Ellipse Width="18" Height="18" Fill="#333333">
                                <Ellipse.Effect>
                                    <DropShadowEffect BlurRadius="2" ShadowDepth="1" Opacity="0.7" Color="#222222" />
                                </Ellipse.Effect>
                            </Ellipse>
                            
                            <!-- LED body with binding to connection status -->
                            <Ellipse Width="16" Height="16">
                                <Ellipse.Style>
                                    <Style TargetType="Ellipse">
                                        <Setter Property="Fill">
                                            <Setter.Value>
                                                <RadialGradientBrush>
                                                    <GradientStop Offset="0" Color="#CCCCCC" /> <!-- Default center color -->
                                                    <GradientStop Offset="1" Color="#666666" /> <!-- Default edge color -->
                                                </RadialGradientBrush>
                                            </Setter.Value>
                                        </Setter>
                                        <Setter Property="Effect">
                                            <Setter.Value>
                                                <DropShadowEffect BlurRadius="5" ShadowDepth="0" Opacity="0.3" Color="#888888" />
                                            </Setter.Value>
                                        </Setter>
                                        <Style.Triggers>
                                            <!-- Connected: Green LED -->
                                            <DataTrigger Binding="{Binding ConnectionStatus}" Value="Connected">
                                                <Setter Property="Fill">
                                                    <Setter.Value>
                                                        <RadialGradientBrush>
                                                            <GradientStop Offset="0" Color="#BBFFBB" /> <!-- Bright green center -->
                                                            <GradientStop Offset="1" Color="#00BB00" /> <!-- Dark green edge -->
                                                        </RadialGradientBrush>
                                                    </Setter.Value>
                                                </Setter>
                                                <Setter Property="Effect">
                                                    <Setter.Value>
                                                        <DropShadowEffect BlurRadius="5" ShadowDepth="0" Opacity="0.7" Color="#33FF33" />
                                                    </Setter.Value>
                                                </Setter>
                                            </DataTrigger>
                                            
                                            <!-- Failed: Red LED -->
                                            <DataTrigger Binding="{Binding ConnectionStatus}" Value="Failed">
                                                <Setter Property="Fill">
                                                    <Setter.Value>
                                                        <RadialGradientBrush>
                                                            <GradientStop Offset="0" Color="#FFBBBB" /> <!-- Bright red center -->
                                                            <GradientStop Offset="1" Color="#BB0000" /> <!-- Dark red edge -->
                                                        </RadialGradientBrush>
                                                    </Setter.Value>
                                                </Setter>
                                                <Setter Property="Effect">
                                                    <Setter.Value>
                                                        <DropShadowEffect BlurRadius="5" ShadowDepth="0" Opacity="0.7" Color="#FF3333" />
                                                    </Setter.Value>
                                                </Setter>
                                            </DataTrigger>
                                            
                                            <!-- Master Connected: Blue LED -->
                                            <DataTrigger Binding="{Binding ConnectionStatus}" Value="MasterConnected">
                                                <Setter Property="Fill">
                                                    <Setter.Value>
                                                        <RadialGradientBrush>
                                                            <GradientStop Offset="0" Color="#BBBBFF" /> <!-- Bright blue center -->
                                                            <GradientStop Offset="1" Color="#0000BB" /> <!-- Dark blue edge -->
                                                        </RadialGradientBrush>
                                                    </Setter.Value>
                                                </Setter>
                                                <Setter Property="Effect">
                                                    <Setter.Value>
                                                        <DropShadowEffect BlurRadius="5" ShadowDepth="0" Opacity="0.7" Color="#3333FF" />
                                                    </Setter.Value>
                                                </Setter>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Ellipse.Style>
                            </Ellipse>
                            
                            <!-- Light reflection highlight -->
                            <Ellipse Width="7" Height="5" VerticalAlignment="Top" HorizontalAlignment="Left" Margin="3,3,0,0">
                                <Ellipse.Fill>
                                    <RadialGradientBrush Center="0.3,0.3" RadiusX="0.6" RadiusY="0.6">
                                        <GradientStop Color="#AAFFFFFF" Offset="0" />
                                        <GradientStop Color="#00FFFFFF" Offset="1" />
                                    </RadialGradientBrush>
                                </Ellipse.Fill>
                            </Ellipse>
                            
                            <Grid.ToolTip>
                                <ToolTip Content="{Binding ConnectionStatus}" />
                            </Grid.ToolTip>
                        </Grid>
                        <Button Content="Connect" Command="{Binding ConnectCommand}" Width="80" Margin="0,0,10,0" Style="{StaticResource StandardButtonStyle}" />
                        <Button Content="Disconnect" Command="{Binding DisconnectCommand}" Width="80" Style="{StaticResource StandardButtonStyle}" />
                    </StackPanel>
                </Grid>
            </Grid>
        </GroupBox>
        
        <!-- Main Content Area -->
        <TabControl Grid.Row="1" Margin="5" Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" BorderBrush="{DynamicResource {x:Static SystemColors.ActiveBorderBrushKey}}">
            <!-- Master Mode Tab (visible when in master mode) -->
            <TabItem Header="Master Mode" IsSelected="{Binding IsMasterMode, Mode=OneWay}" Visibility="{Binding IsMasterMode, Converter={StaticResource BooleanToVisibilityConverter}, Mode=OneWay}">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="*" />
                    </Grid.RowDefinitions>
                    
                    <!-- Request Builder -->
                    <GroupBox Grid.Row="0" Header="Request Builder" Margin="5,0,5,5" Padding="5,0,5,5">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="300" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="150" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="150" />
                            </Grid.ColumnDefinitions>
                            
                            <!-- Function Code Selection -->
                            <TextBlock Grid.Row="0" Grid.Column="0" Text="Function:" VerticalAlignment="Center" Margin="5,5,10,5" />
                            <ComboBox Grid.Row="0" Grid.Column="1" Margin="0,5,15,5" Name="FunctionCodeComboBox"
                                      SelectionChanged="FunctionCodeComboBox_SelectionChanged">
                                <ComboBoxItem Content="Read Coils" Tag="1" />
                                <ComboBoxItem Content="Read Discrete Inputs" Tag="2" />
                                <ComboBoxItem Content="Read Holding Registers" Tag="3" IsSelected="True" />
                                <ComboBoxItem Content="Read Input Registers" Tag="4" />
                                <ComboBoxItem Content="Write Single Coil" Tag="5" />
                                <ComboBoxItem Content="Write Single Register" Tag="6" />
                                <ComboBoxItem Content="Write Multiple Coils" Tag="15" />
                                <ComboBoxItem Content="Write Multiple Registers" Tag="16" />
                            </ComboBox>
                            
                            <TextBlock Grid.Row="0" Grid.Column="2" Text="Slave ID:" VerticalAlignment="Center" Margin="5,5,10,5" />
                            <TextBox Grid.Row="0" Grid.Column="3" Text="{Binding CurrentRequest.SlaveId, Mode=TwoWay}" 
                                     Margin="0,5,15,5" />
                            
                            <TextBlock Grid.Row="0" Grid.Column="4" Text="Start Address:" VerticalAlignment="Center" Margin="5,5,10,5" />
                            <TextBox Grid.Row="0" Grid.Column="5" Text="{Binding CurrentRequest.StartAddress, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                                     Margin="0,5,5,5" />
                            
                            <!-- Quantity (only visible for read functions) -->
                            <TextBlock Grid.Row="1" Grid.Column="0" Text="Quantity:" VerticalAlignment="Center" Margin="5,12,10,5" 
                                       Visibility="{Binding IsWriteFunction, Converter={StaticResource InverseBooleanToVisibilityConverter}}" />
                            <TextBox Grid.Row="1" Grid.Column="1" Text="{Binding CurrentRequest.Quantity, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                                     Margin="0,12,15,5" Visibility="{Binding IsWriteFunction, Converter={StaticResource InverseBooleanToVisibilityConverter}}" />

                            <!-- Dynamic write data inputs -->
                            <Grid Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="6"
                                  Margin="5,2,5,2"
                                  MinHeight="170"
                                  MaxHeight="170"
                                  Visibility="{Binding IsWriteFunction, Converter={StaticResource BooleanToVisibilityConverter}}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="*" />
                                </Grid.RowDefinitions>
                                
                                <!-- DataGrid with ScrollViewer -->
                                <Border Grid.Column="0" BorderThickness="1" BorderBrush="#CCCCCC">
                                    <DataGrid x:Name="WriteDataItemsDataGrid" 
                                               ItemsSource="{Binding WriteDataInputs}"
                                               AutoGenerateColumns="False"
                                               CanUserAddRows="False"
                                               CanUserDeleteRows="False"
                                               HeadersVisibility="Column"
                                               GridLinesVisibility="All"
                                               BorderThickness="0"
                                               RowHeaderWidth="0"
                                               HorizontalAlignment="Stretch"
                                               VerticalAlignment="Stretch"
                                               MinWidth="450"
                                               ScrollViewer.CanContentScroll="True" 
                                               ScrollViewer.VerticalScrollBarVisibility="Visible"
                                               ScrollViewer.HorizontalScrollBarVisibility="Auto"
                                               Height="170"
                                               RowHeight="20"
                                               Margin="0,0,0,0">
                                    <!-- Add right-click context menu for row removal -->
                                    <DataGrid.ContextMenu>
                                        <ContextMenu>
                                            <MenuItem Header="Remove Row" 
                                                      Command="{Binding RemoveWriteDataItemCommand}" 
                                                      CommandParameter="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=PlacementTarget.SelectedItem}"
                                                      Visibility="{Binding IsMultipleWriteFunction, Converter={StaticResource BooleanToVisibilityConverter}}" />
                                        </ContextMenu>
                                    </DataGrid.ContextMenu>
                                        <!-- Style for headers and rows -->
                                        <DataGrid.Resources>
                                            <Style TargetType="{x:Type DataGridColumnHeader}">
                                                <Setter Property="Padding" Value="5,1,5,1" />
                                                <Setter Property="Margin" Value="0" />
                                                <Setter Property="Background" Value="#F0F0F0" />
                                                <Setter Property="Height" Value="22" />
                                            </Style>
                                            <Style TargetType="{x:Type DataGridRow}">
                                                <Setter Property="MinHeight" Value="20" />
                                                <Setter Property="MaxHeight" Value="20" />
                                            </Style>
                                        </DataGrid.Resources>
                                    <DataGrid.Columns>
                                        <!-- Address Column (non-editable) -->
                                        <DataGridTextColumn Header="Address" 
                                                          Binding="{Binding Address}" 
                                                          Width="65"
                                                          IsReadOnly="True">
                                            <DataGridTextColumn.ElementStyle>
                                                <Style TargetType="TextBlock">
                                                    <Setter Property="VerticalAlignment" Value="Center" />
                                                    <Setter Property="Padding" Value="5,0" />
                                                </Style>
                                            </DataGridTextColumn.ElementStyle>
                                        </DataGridTextColumn>

                                        <!-- Value Column -->
                                        <DataGridTemplateColumn Header="Value" Width="150">
                                            <DataGridTemplateColumn.CellTemplate>
                                                <DataTemplate>
                                                    <!-- Coil Write (Boolean) Template -->
                                                    <Grid>
                                                        <CheckBox Visibility="{Binding IsCoilWrite, Converter={StaticResource BooleanToVisibilityConverter}}"
                                                                  IsChecked="{Binding BooleanValue, Mode=TwoWay}" 
                                                                  HorizontalAlignment="Center"
                                                                  VerticalAlignment="Center"
                                                                  Margin="5,0"
                                                                  ToolTip="Toggle coil value (True/False)"
                                                                  Checked="CheckBox_Checked"
                                                                  Unchecked="CheckBox_Unchecked" />

                                                        <!-- Register Value TextBox -->
                                                        <TextBox Visibility="{Binding IsCoilWrite, Converter={StaticResource InverseBooleanToVisibilityConverter}}"
                                                                Text="{Binding Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                                                                Height="20" Width="Auto" Margin="5,0"
                                                                VerticalContentAlignment="Center"
                                                                FontSize="11"
                                                                Padding="2,0"
                                                                ToolTip="Enter register value" />
                                                    </Grid>
                                                </DataTemplate>
                                            </DataGridTemplateColumn.CellTemplate>
                                        </DataGridTemplateColumn>

                                        <!-- Name Column -->
                                        <DataGridTextColumn Header="Name" 
                                                          Binding="{Binding Name}" 
                                                          Width="330">
                                            <DataGridTextColumn.ElementStyle>
                                                <Style TargetType="TextBlock">
                                                    <Setter Property="VerticalAlignment" Value="Center" />
                                                    <Setter Property="Padding" Value="5,0" />
                                                </Style>
                                            </DataGridTextColumn.ElementStyle>
                                            <DataGridTextColumn.EditingElementStyle>
                                                <Style TargetType="TextBox">
                                                    <Setter Property="VerticalContentAlignment" Value="Center" />
                                                    <Setter Property="Padding" Value="5,0" />
                                                </Style>
                                            </DataGridTextColumn.EditingElementStyle>
                                        </DataGridTextColumn>

                                        <!-- Data Type Column -->
                                        <DataGridTemplateColumn Header="Data Type" Width="150">
                                            <DataGridTemplateColumn.CellTemplate>
                                                <DataTemplate>
                                                    <ComboBox ItemsSource="{Binding AvailableDataTypes}"
                                                            SelectedItem="{Binding SelectedDataType, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                                            Height="20" Margin="5,0"
                                                            VerticalContentAlignment="Center"
                                                            FontSize="11"
                                                            Padding="2,0"
                                                            ToolTip="Select data type">
                                                        <ComboBox.ItemTemplate>
                                                            <DataTemplate>
                                                                <TextBlock Text="{Binding Converter={StaticResource ModbusDataTypeConverter}}" FontSize="10" />
                                                            </DataTemplate>
                                                        </ComboBox.ItemTemplate>
                                                    </ComboBox>
                                                </DataTemplate>
                                            </DataGridTemplateColumn.CellTemplate>
                                        </DataGridTemplateColumn>

                                        <!-- Remove Button Column -->

                                    </DataGrid.Columns>
                                </DataGrid>
                                </Border>
                                
                                <!-- Action Buttons (moved to right side) -->
                                <StackPanel Grid.Column="1" Orientation="Vertical" Margin="10,0,0,0" VerticalAlignment="Top">
                                    <!-- Add Row Button -->
                                    <Button Padding="8,4" 
                                            Command="{Binding AddWriteDataItemCommand}" 
                                            Content="Add Row" 
                                            Style="{StaticResource StandardButtonStyle}"
                                            Margin="0,0,0,10"
                                            Visibility="{Binding IsMultipleWriteFunction, Converter={StaticResource BooleanToVisibilityConverter}}" />
                                    
                                    <!-- Remove Row Button -->
                                    <Button Padding="8,4" 
                                            Command="{Binding RemoveLastWriteDataItemCommand}" 
                                            Content="Remove Row" 
                                            Style="{StaticResource StandardButtonStyle}"
                                            Margin="0,0,0,10"
                                            Visibility="{Binding IsMultipleWriteFunction, Converter={StaticResource BooleanToVisibilityConverter}}" />
                                    
                                    <!-- Send Button -->
                                    <Button Padding="8,4" 
                                            Command="{Binding SendRequestCommand}"
                                            Content="Send" 
                                            Style="{StaticResource StandardButtonStyle}" 
                                            Margin="0,0,0,10" />
                                    
                                    <!-- RTU Device Scan Buttons -->
                                    <StackPanel Orientation="Vertical" 
                                              Visibility="{Binding IsRtuMode, Converter={StaticResource BooleanToVisibilityConverter}}">
                                        <Button Padding="8,4" 
                                                Command="{Binding ScanForDevicesCommand}"
                                                Content="Scan for devices" 
                                                Style="{StaticResource StandardButtonStyle}" 
                                                Margin="0,0,0,10"
                                                ToolTip="Scan for Modbus devices on RTU network" />
                                        <Button Padding="8,4" 
                                                Command="{Binding StopDeviceScanCommand}"
                                                Content="Stop scan" 
                                                Style="{StaticResource StandardButtonStyle}" 
                                                ToolTip="Stop the current device scan" />
                                    </StackPanel>
                                </StackPanel>
                            </Grid>
                            
                            <!-- Data Type for Read Functions -->
                            <StackPanel Grid.Row="3" Grid.Column="0" Grid.ColumnSpan="4" Orientation="Horizontal" Margin="5,12,10,5"
                                        Visibility="{Binding IsWriteFunction, Converter={StaticResource InverseBooleanToVisibilityConverter}}">
                                <TextBlock Text="Data Type: " VerticalAlignment="Center" />
                                <ComboBox Width="120" ItemsSource="{Binding AvailableDataTypes}"
                                          SelectedItem="{Binding SelectedDataType}" 
                                          Margin="5,0,0,0">
                                    <ComboBox.ItemTemplate>
                                        <DataTemplate>
                                            <TextBlock Text="{Binding Converter={StaticResource ModbusDataTypeConverter}}" />
                                        </DataTemplate>
                                    </ComboBox.ItemTemplate>
                                </ComboBox>
                                <CheckBox Margin="10,0,0,0" 
                                          IsChecked="{Binding ReverseRegisterOrder}" 
                                          VerticalAlignment="Center">
                                    <CheckBox.Content>
                                        <MultiBinding Converter="{StaticResource CheckboxLabelConverter}" Mode="OneWay">
                                            <Binding Path="SelectedDataType" Mode="OneWay"/>
                                        </MultiBinding>
                                    </CheckBox.Content>
                                    <CheckBox.ToolTip>
                                        <MultiBinding Converter="{StaticResource CheckboxLabelConverter}" Mode="OneWay">
                                            <Binding Path="SelectedDataType" Mode="OneWay"/>
                                            <Binding Source="{x:Static system:Boolean.TrueString}"/>
                                        </MultiBinding>
                                    </CheckBox.ToolTip>
                                </CheckBox>
                                <Button Margin="10,0,0,0" Padding="8,4" Command="{Binding SendRequestCommand}"
                                        Content="Send" Style="{StaticResource StandardButtonStyle}" />
                                <!-- RTU Device Scan Buttons -->
                                <StackPanel Orientation="Horizontal" Margin="10,0,0,0"
                                          Visibility="{Binding IsRtuMode, Converter={StaticResource BooleanToVisibilityConverter}}">
                                    <Button Padding="8,4" Command="{Binding ScanForDevicesCommand}"
                                            Content="Scan for devices" Style="{StaticResource StandardButtonStyle}" 
                                            ToolTip="Scan for Modbus devices on RTU network" />
                                    <Button Margin="10,0,0,0" Padding="8,4" Command="{Binding StopDeviceScanCommand}"
                                            Content="Stop scan" Style="{StaticResource StandardButtonStyle}" 
                                            ToolTip="Stop the current device scan" />
                                </StackPanel>
                            </StackPanel>
                        </Grid>
                    </GroupBox>

                    <!-- Response Display -->
                    <GroupBox Grid.Row="1" Header="Response" Margin="5,0,5,5" Padding="5,0,5,5" Style="{StaticResource GroupBoxHeaderStyle}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            
                            <Grid Grid.Row="0">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>
                                <TextBlock Grid.Column="0" Text="Response Status:" Margin="0,0,5,0" />
                                <TextBlock Grid.Column="1" Text="{Binding ResponseStatus}" />
                                <TextBlock Grid.Column="2" Text="Response Time:" Margin="10,0,5,0" />
                                <TextBlock Grid.Column="3" Text="{Binding ResponseTime}" />
                            </Grid>
                            
                            <Grid Grid.Row="1">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="*" />
                                </Grid.RowDefinitions>
                                
                                <DockPanel LastChildFill="True">
                                    <!-- Use a ContentControl to ensure only one item is displayed at a time -->
                                    <ContentControl>
                                        <ContentControl.Style>
                                            <Style TargetType="ContentControl">
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding HasLastResponse}" Value="True">
                                                        <Setter Property="Content">
                                                            <Setter.Value>
                                                                <!-- Response DataGrid -->
                                                                <DataGrid AutoGenerateColumns="False" IsReadOnly="True" 
                                                                          ItemsSource="{Binding ResponseItems}"
                                                                          Style="{StaticResource ModernDataGridStyle}"
                                                                          ScrollViewer.VerticalScrollBarVisibility="Auto">
                                                                    <DataGrid.Columns>
                                                                        <!-- Address Column -->
                                                                        <DataGridTextColumn Header="Address" 
                                                                                          Binding="{Binding Address}" 
                                                                                          Width="80"
                                                                                          IsReadOnly="True" />
                                                                        
                                                                        <!-- Value Column -->
                                                                        <DataGridTextColumn Header="Value" 
                                                                                          Binding="{Binding Value}" 
                                                                                          Width="120"
                                                                                          IsReadOnly="True" />
                                                                        
                                                                        <!-- Data Type Column -->
                                                                        <DataGridTextColumn Header="Data Type" 
                                                                                          Binding="{Binding DataType}" 
                                                                                          Width="100"
                                                                                          IsReadOnly="True" />
                                                                        
                                                                        <!-- Hex Column -->
                                                                        <DataGridTextColumn Header="Hex" 
                                                                                          Binding="{Binding HexValue}" 
                                                                                          Width="120"
                                                                                          IsReadOnly="True" />
                                                                        
                                                                        <!-- Binary Column -->
                                                                        <DataGridTextColumn Header="Binary" 
                                                                                          Binding="{Binding BinaryValue}" 
                                                                                          Width="*"
                                                                                          IsReadOnly="True" />
                                                                    </DataGrid.Columns>
                                                                </DataGrid>
                                                            </Setter.Value>
                                                        </Setter>
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding HasLastResponse}" Value="False">
                                                        <Setter Property="Content">
                                                            <Setter.Value>
                                                                <!-- No response message -->
                                                                <TextBlock Text="No response received." Margin="0,10,0,0" />
                                                            </Setter.Value>
                                                        </Setter>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </ContentControl.Style>
                                    </ContentControl>
                                </DockPanel>
                            </Grid>
                        </Grid>
                    </GroupBox>
                </Grid>
                </TabItem>
                
                <!-- Slave Mode Tab (visible when in slave mode) -->
                <TabItem Header="Slave Mode" IsSelected="{Binding IsSlaveMode, Mode=OneWay}" Visibility="{Binding IsSlaveMode, Converter={StaticResource BooleanToVisibilityConverter}, Mode=OneWay}">
                    <Grid>
                        <!-- Register Tables in Tabs -->
                        <TabControl Margin="5" Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" BorderBrush="{DynamicResource {x:Static SystemColors.ActiveBorderBrushKey}}">
                            <!-- Holding Registers Tab -->
                            <TabItem Header="Holding Registers">
                                <Grid>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="*" />
                                        <RowDefinition Height="Auto" />
                                    </Grid.RowDefinitions>
                                    
                                    <!-- Register Data Grid -->
                                    <DataGrid Grid.Row="0" AutoGenerateColumns="False" IsReadOnly="False"
                                           Name="RegistersGrid"
                                           ItemsSource="{Binding RegisterDefinitions}"
                                           SelectedItem="{Binding SelectedRegister, Mode=TwoWay}"
                                           CanUserAddRows="False"
                                           Style="{StaticResource ModernDataGridStyle}"
                                           RowStyle="{StaticResource CustomDataGridRowStyle}">
                                    <DataGrid.Resources>
                                        <!-- Style for highlighting recently modified registers -->
                                        <Style TargetType="DataGridRow">
                                            <!-- Default style setters -->
                                            <Style.Triggers>
                                                <!-- Handle non-selected, modified rows -->
                                                <DataTrigger Binding="{Binding IsRecentlyModified}" Value="True">
                                                    <Setter Property="Background" Value="#FFFFCC" /> <!-- Light yellow highlight -->
                                                    <Setter Property="FontWeight" Value="Bold" />
                                                </DataTrigger>
                                                
                                                <!-- Handle selected, modified rows -->
                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Binding IsRecentlyModified}" Value="True" />
                                                        <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="True" />
                                                    </MultiDataTrigger.Conditions>
                                                    <Setter Property="Background" Value="#FFF6A0" /> <!-- Darker yellow for selected+highlighted -->
                                                    <Setter Property="FontWeight" Value="Bold" />
                                                </MultiDataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </DataGrid.Resources>
                                    <DataGrid.Columns>
                                        <DataGridTextColumn Header="Address" Binding="{Binding Address}" Width="80" />
                                        <DataGridTextColumn Header="Value" Binding="{Binding EditableValue, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="100" />
                                        <DataGridTextColumn Header="Name" Binding="{Binding Name}" Width="150" />
                                        <DataGridTextColumn Header="Description" Binding="{Binding Description}" Width="*" />
                                        <DataGridComboBoxColumn Header="Data Type" 
                                                              SelectedItemBinding="{Binding DataType}" 
                                                              Width="100">
                                            <DataGridComboBoxColumn.ElementStyle>
                                                <Style TargetType="ComboBox">
                                                    <Setter Property="ItemsSource" Value="{Binding DataContext.AvailableDataTypes, RelativeSource={RelativeSource AncestorType=Window}}" />
                                                </Style>
                                            </DataGridComboBoxColumn.ElementStyle>
                                            <DataGridComboBoxColumn.EditingElementStyle>
                                                <Style TargetType="ComboBox">
                                                    <Setter Property="ItemsSource" Value="{Binding DataContext.AvailableDataTypes, RelativeSource={RelativeSource AncestorType=Window}}" />
                                                </Style>
                                            </DataGridComboBoxColumn.EditingElementStyle>
                                        </DataGridComboBoxColumn>
                                    </DataGrid.Columns>
                                </DataGrid>
                                
                                <!-- Register Actions -->
                                <StackPanel Grid.Row="1" Orientation="Horizontal" HorizontalAlignment="Right" Margin="0,10,0,0">
                                    <Button Content="Add Register" Width="100" Margin="0,0,8,0"
                                            Command="{Binding AddRegisterCommand}" Style="{StaticResource StandardButtonStyle}" />
                                    <Button Content="Remove Register" Width="115" Margin="0,0,8,0"
                                            Command="{Binding RemoveRegisterCommand}" 
                                            IsEnabled="{Binding HasSelectedRegister}" Style="{StaticResource StandardButtonStyle}" />
                                    <Button Content="Import" Width="80" Margin="0,0,8,0"
                                            Command="{Binding ImportRegistersCommand}" Style="{StaticResource StandardButtonStyle}" />
                                    <Button Content="Export" Width="80" 
                                            Command="{Binding ExportRegistersCommand}" 
                                            IsEnabled="{Binding HasRegisters}" Style="{StaticResource StandardButtonStyle}" />
                                </StackPanel>
                            </Grid>
                        </TabItem>
                        
                        <!-- Input Registers Tab -->
                        <TabItem Header="Input Registers" IsSelected="{Binding ShowInputRegisters, Mode=TwoWay}">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="*" />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>
                                
                                <!-- Input Register Data Grid -->
                                <DataGrid Grid.Row="0" AutoGenerateColumns="False" IsReadOnly="False"
                                           Name="InputRegistersGrid"
                                           ItemsSource="{Binding InputRegisterDefinitions}"
                                           SelectedItem="{Binding SelectedInputRegister, Mode=TwoWay}"
                                           CanUserAddRows="False"
                                           Style="{StaticResource ModernDataGridStyle}"
                                           RowStyle="{StaticResource CustomDataGridRowStyle}">
                                    <DataGrid.Resources>
                                        <!-- Style for highlighting recently modified registers -->
                                        <Style TargetType="DataGridRow">
                                            <!-- Default style setters -->
                                            <Style.Triggers>
                                                <!-- Handle non-selected, modified rows -->
                                                <DataTrigger Binding="{Binding IsRecentlyModified}" Value="True">
                                                    <Setter Property="Background" Value="#FFFFCC" /> <!-- Light yellow highlight -->
                                                    <Setter Property="FontWeight" Value="Bold" />
                                                </DataTrigger>
                                                
                                                <!-- Handle selected, modified rows -->
                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Binding IsRecentlyModified}" Value="True" />
                                                        <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="True" />
                                                    </MultiDataTrigger.Conditions>
                                                    <Setter Property="Background" Value="#FFF6A0" /> <!-- Darker yellow for selected+highlighted -->
                                                    <Setter Property="FontWeight" Value="Bold" />
                                                </MultiDataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </DataGrid.Resources>
                                    <DataGrid.Columns>
                                        <DataGridTextColumn Header="Address" Binding="{Binding Address}" Width="80" />
                                        <DataGridTextColumn Header="Value" Binding="{Binding EditableValue, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="100" />
                                        <DataGridTextColumn Header="Name" Binding="{Binding Name}" Width="150" />
                                        <DataGridTextColumn Header="Description" Binding="{Binding Description}" Width="*" />
                                        <DataGridComboBoxColumn Header="Data Type" 
                                                              SelectedItemBinding="{Binding DataType}" 
                                                              Width="100">
                                            <DataGridComboBoxColumn.ElementStyle>
                                                <Style TargetType="ComboBox">
                                                    <Setter Property="ItemsSource" Value="{Binding DataContext.AvailableDataTypes, RelativeSource={RelativeSource AncestorType=Window}}" />
                                                </Style>
                                            </DataGridComboBoxColumn.ElementStyle>
                                            <DataGridComboBoxColumn.EditingElementStyle>
                                                <Style TargetType="ComboBox">
                                                    <Setter Property="ItemsSource" Value="{Binding DataContext.AvailableDataTypes, RelativeSource={RelativeSource AncestorType=Window}}" />
                                                </Style>
                                            </DataGridComboBoxColumn.EditingElementStyle>
                                        </DataGridComboBoxColumn>
                                    </DataGrid.Columns>
                                </DataGrid>
                                
                                <!-- Input Register Actions -->
                                <StackPanel Grid.Row="1" Orientation="Horizontal" HorizontalAlignment="Right" Margin="0,10,0,0">
                                    <Button Content="Add Input Register" Width="120" Margin="0,0,8,0"
                                            Command="{Binding AddInputRegisterCommand}" Style="{StaticResource StandardButtonStyle}" />
                                    <Button Content="Remove Input Register" Width="135" Margin="0,0,8,0"
                                            Command="{Binding RemoveInputRegisterCommand}" 
                                            IsEnabled="{Binding HasSelectedInputRegister}" Style="{StaticResource StandardButtonStyle}" />
                                    <Button Content="Import" Width="80" Margin="0,0,8,0"
                                            Command="{Binding ImportInputRegistersCommand}" Style="{StaticResource StandardButtonStyle}" />
                                    <Button Content="Export" Width="80" 
                                            Command="{Binding ExportInputRegistersCommand}" 
                                            IsEnabled="{Binding HasInputRegisters}" Style="{StaticResource StandardButtonStyle}" />
                                </StackPanel>
                            </Grid>
                        </TabItem>
                        
                        <!-- Coils Tab -->
                        <TabItem Header="Coils">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="*" />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>
                                
                                <!-- Coils Data Grid -->
                                <DataGrid Grid.Row="0" AutoGenerateColumns="False" IsReadOnly="False"
                                           Name="CoilsGrid"
                                           ItemsSource="{Binding CoilDefinitions}"
                                           SelectedItem="{Binding SelectedCoil, Mode=TwoWay}"
                                           CanUserAddRows="False"
                                           Style="{StaticResource ModernDataGridStyle}"
                                           RowStyle="{StaticResource CustomDataGridRowStyle}">
                                    <DataGrid.Resources>
                                        <!-- Style for highlighting recently modified coils -->
                                        <Style TargetType="DataGridRow">
                                            <!-- Default style setters -->
                                            <Style.Triggers>
                                                <!-- Handle non-selected, modified rows -->
                                                <DataTrigger Binding="{Binding IsRecentlyModified}" Value="True">
                                                    <Setter Property="Background" Value="#FFFFCC" /> <!-- Light yellow highlight -->
                                                    <Setter Property="FontWeight" Value="Bold" />
                                                </DataTrigger>
                                                
                                                <!-- Handle selected, modified rows -->
                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Binding IsRecentlyModified}" Value="True" />
                                                        <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="True" />
                                                    </MultiDataTrigger.Conditions>
                                                    <Setter Property="Background" Value="#FFF6A0" /> <!-- Darker yellow for selected+highlighted -->
                                                    <Setter Property="FontWeight" Value="Bold" />
                                                </MultiDataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </DataGrid.Resources>
                                    <DataGrid.Columns>
                                        <DataGridTextColumn Header="Address" Binding="{Binding Address}" Width="80" />
                                        <DataGridCheckBoxColumn Header="Value" Binding="{Binding Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="100" />
                                        <DataGridTextColumn Header="Name" Binding="{Binding Name}" Width="150" />
                                        <DataGridTextColumn Header="Description" Binding="{Binding Description}" Width="*" />
                                    </DataGrid.Columns>
                                </DataGrid>
                                
                                <!-- Coil Actions -->
                                <StackPanel Grid.Row="1" Orientation="Horizontal" HorizontalAlignment="Right" Margin="0,10,0,0">
                                    <Button Content="Add Coil" Width="100" Margin="0,0,8,0"
                                            Command="{Binding AddCoilCommand}" Style="{StaticResource StandardButtonStyle}" />
                                    <Button Content="Remove Coil" Width="115" Margin="0,0,8,0"
                                            Command="{Binding RemoveCoilCommand}" 
                                            IsEnabled="{Binding HasSelectedCoil}" Style="{StaticResource StandardButtonStyle}" />
                                    <Button Content="Import" Width="80" Margin="0,0,8,0"
                                            Command="{Binding ImportCoilsCommand}" Style="{StaticResource StandardButtonStyle}" />
                                    <Button Content="Export" Width="80" 
                                            Command="{Binding ExportCoilsCommand}" 
                                            IsEnabled="{Binding HasCoils}" Style="{StaticResource StandardButtonStyle}" />
                                </StackPanel>
                            </Grid>
                        </TabItem>
                        
                        <!-- Discrete Inputs Tab -->
                        <TabItem Header="Discrete Inputs">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="*" />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>
                                
                                <!-- Discrete Inputs Data Grid -->
                                <DataGrid Grid.Row="0" AutoGenerateColumns="False" IsReadOnly="False"
                                           Name="DiscreteInputsGrid"
                                           ItemsSource="{Binding DiscreteInputDefinitions}"
                                           SelectedItem="{Binding SelectedDiscreteInput, Mode=TwoWay}"
                                           CanUserAddRows="False"
                                           Style="{StaticResource ModernDataGridStyle}"
                                           RowStyle="{StaticResource CustomDataGridRowStyle}">
                                    <DataGrid.Resources>
                                        <!-- Style for highlighting recently modified discrete inputs -->
                                        <Style TargetType="DataGridRow">
                                            <!-- Default style setters -->
                                            <Style.Triggers>
                                                <!-- Handle non-selected, modified rows -->
                                                <DataTrigger Binding="{Binding IsRecentlyModified}" Value="True">
                                                    <Setter Property="Background" Value="#FFFFCC" /> <!-- Light yellow highlight -->
                                                    <Setter Property="FontWeight" Value="Bold" />
                                                </DataTrigger>
                                                
                                                <!-- Handle selected, modified rows -->
                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Binding IsRecentlyModified}" Value="True" />
                                                        <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="True" />
                                                    </MultiDataTrigger.Conditions>
                                                    <Setter Property="Background" Value="#FFF6A0" /> <!-- Darker yellow for selected+highlighted -->
                                                    <Setter Property="FontWeight" Value="Bold" />
                                                </MultiDataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </DataGrid.Resources>
                                    <DataGrid.Columns>
                                        <DataGridTextColumn Header="Address" Binding="{Binding Address}" Width="80" />
                                        <DataGridCheckBoxColumn Header="Value" Binding="{Binding Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="100" />
                                        <DataGridTextColumn Header="Name" Binding="{Binding Name}" Width="150" />
                                        <DataGridTextColumn Header="Description" Binding="{Binding Description}" Width="*" />
                                    </DataGrid.Columns>
                                </DataGrid>
                                
                                <!-- Discrete Input Actions -->
                                <StackPanel Grid.Row="1" Orientation="Horizontal" HorizontalAlignment="Right" Margin="0,10,0,0">
                                    <Button Content="Add Discrete Input" Width="120" Margin="0,0,8,0"
                                            Command="{Binding AddDiscreteInputCommand}" Style="{StaticResource StandardButtonStyle}" />
                                    <Button Content="Remove Discrete Input" Width="140" Margin="0,0,8,0"
                                            Command="{Binding RemoveDiscreteInputCommand}" 
                                            IsEnabled="{Binding HasSelectedDiscreteInput}" Style="{StaticResource StandardButtonStyle}" />
                                    <Button Content="Import" Width="80" Margin="0,0,8,0"
                                            Command="{Binding ImportDiscreteInputsCommand}" Style="{StaticResource StandardButtonStyle}" />
                                    <Button Content="Export" Width="80" 
                                            Command="{Binding ExportDiscreteInputsCommand}" 
                                            IsEnabled="{Binding HasDiscreteInputs}" Style="{StaticResource StandardButtonStyle}" />
                                </StackPanel>
                            </Grid>
                        </TabItem>
                    </TabControl>
                </Grid>
            </TabItem>
            
            <!-- Listen In Mode Tab (visible when in listen mode) -->
            <TabItem Header="Listen In Mode" IsSelected="{Binding IsListenMode, Mode=OneWay}" Visibility="{Binding IsListenMode, Converter={StaticResource BooleanToVisibilityConverter}, Mode=OneWay}">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    
                    <!-- Captured Messages Display -->
                    <GroupBox Grid.Row="0" Header="Captured Modbus Messages" Margin="5" Padding="5" Style="{StaticResource GroupBoxHeaderStyle}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            
                            <!-- Message Count Info -->
                            <StackPanel Grid.Row="0" Orientation="Horizontal" Margin="0,0,0,10">
                                <TextBlock Text="Messages Captured: " VerticalAlignment="Center" />
                                <TextBlock Text="{Binding CapturedMessages.Count}" FontWeight="Bold" VerticalAlignment="Center" />
                                <TextBlock Text=" / 20,000 (max)" VerticalAlignment="Center" Margin="0,0,20,0" />
                                <TextBlock Text="Status: " VerticalAlignment="Center" />
                                <TextBlock Text="{Binding ConnectionStatus}" FontWeight="Bold" VerticalAlignment="Center" />
                            </StackPanel>
                            
                            <!-- Messages DataGrid -->
                            <DataGrid Grid.Row="1" 
                                      ItemsSource="{Binding CapturedMessages}"
                                      SelectedItem="{Binding SelectedCapturedMessage}"
                                      AutoGenerateColumns="False"
                                      IsReadOnly="True"
                                      GridLinesVisibility="Horizontal"
                                      HeadersVisibility="Column"
                                      CanUserResizeColumns="True"
                                      CanUserSortColumns="True"
                                      SelectionMode="Single"
                                      AlternatingRowBackground="#F5F5F5">
                                <DataGrid.Columns>
                                    <DataGridTextColumn Header="Time" Binding="{Binding TimestampFormatted}" Width="80" />
                                    <DataGridTextColumn Header="Direction" Binding="{Binding DirectionString}" Width="120" />
                                    <DataGridTextColumn Header="Slave ID" Binding="{Binding SlaveId}" Width="70" />
                                    <DataGridTextColumn Header="Function" Binding="{Binding FunctionCodeHex}" Width="70" />
                                    <DataGridTextColumn Header="Data Len" Binding="{Binding DataLength}" Width="70" />
                                    <DataGridTextColumn Header="CRC" Binding="{Binding CrcStatus}" Width="60" />
                                    <DataGridTextColumn Header="Parsed Data" Binding="{Binding ParsedData}" Width="300" />
                                    <DataGridTextColumn Header="Raw Data" Binding="{Binding RawDataHex}" Width="*" />
                                </DataGrid.Columns>
                                
                                <!-- Auto-scroll to bottom behavior -->
                                <DataGrid.Style>
                                    <Style TargetType="DataGrid">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding AutoScrollEventLog}" Value="True">
                                                <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGrid.Style>
                            </DataGrid>
                        </Grid>
                    </GroupBox>
                    
                    <!-- Action Buttons -->
                    <StackPanel Grid.Row="1" Orientation="Horizontal" HorizontalAlignment="Right" Margin="5">
                        <Button Content="Clear Messages" Width="120" Margin="0,0,10,0"
                                Command="{Binding ClearCapturedMessagesCommand}" Style="{StaticResource StandardButtonStyle}" />
                        <Button Content="Copy to Clipboard" Width="120" Margin="0,0,10,0"
                                Command="{Binding CopyCapturedMessagesToClipboardCommand}" Style="{StaticResource StandardButtonStyle}" />
                        <Button Content="Export..." Width="80" Margin="0,0,0,0"
                                Command="{Binding ExportCapturedMessagesCommand}" Style="{StaticResource StandardButtonStyle}" />
                    </StackPanel>
                </Grid>
            </TabItem>
        </TabControl>
        
        <!-- Event Log -->
        <GroupBox Grid.Row="2" Header="Event Log" Margin="5" Padding="5" Style="{StaticResource GroupBoxHeaderStyle}">
            <DockPanel LastChildFill="True">
                <!-- Event log controls (docked at bottom) -->
                <StackPanel DockPanel.Dock="Bottom" Orientation="Horizontal" HorizontalAlignment="Right" Margin="0,5,0,0">
                    <CheckBox Content="Auto-scroll" IsChecked="{Binding AutoScrollEventLog}" Margin="0,0,10,0" VerticalAlignment="Center" Name="AutoScrollCheckBox" />
                    <Button Content="Export" Width="80" Height="30" Command="{Binding ExportEventsCommand}" Margin="0,0,10,0" 
                            IsEnabled="{Binding HasEventLogs}" Style="{StaticResource StandardButtonStyle}" />
                    <Button Content="Clear Log" Width="80" Height="30" Command="{Binding ClearEventsCommand}" Style="{StaticResource StandardButtonStyle}" />
                </StackPanel>

                <!-- Event log data grid (fills remaining space) -->
                <DataGrid ItemsSource="{Binding CommunicationEvents}" 
                          Name="EventLogDataGrid"
                          AutoGenerateColumns="False" IsReadOnly="True"
                          LoadingRow="EventLogDataGrid_LoadingRow"
                          MaxHeight="250"
                          Style="{StaticResource ModernDataGridStyle}">
                    <DataGrid.Resources>
                        <Style TargetType="DataGridRow">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Type}" Value="Error">
                                    <Setter Property="Background" Value="#FFDDDD" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding Type}" Value="Info">
                                    <Setter Property="Background" Value="#FFFFDD" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding Type}" Value="Sent">
                                    <Setter Property="Background" Value="#E6F2FF" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding Type}" Value="Received">
                                    <Setter Property="Background" Value="#E6FFE6" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </DataGrid.Resources>
                    <DataGrid.Columns>
                        <DataGridTextColumn Header="Time" Binding="{Binding TimestampString}" Width="100" />
                        <DataGridTextColumn Header="Type" Binding="{Binding TypeString}" Width="100" />
                        <DataGridTextColumn Header="Message" Binding="{Binding Message}" Width="*" />
                        <DataGridTextColumn Header="Raw Data" Binding="{Binding HexData}" Width="250" />
                    </DataGrid.Columns>
                </DataGrid>
            </DockPanel>
        </GroupBox>
    </Grid>
</Window>
